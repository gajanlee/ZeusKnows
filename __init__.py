"""

Init File, used to load vocab and id pairs.
"""
import re, os, sys
import json
from params import Params
import logging

sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/..")
logger = logging.getLogger("vocab_logger")
logging.basicConfig(level = logging.DEBUG, 
                    format = "%(asctime)s : %(levelname)s  %(message)s",
                    datefmt = "%Y-%m-%d %A %H:%M:%S")

class Vocabulary:
    def __init__(self):
        self.vocab_dict, self.char_dict, self.wordlst = {}, {}, []
        self.vocab_ids = self.char_ids = 1
        self.vocab_id_dict = {}
        #self.load_char_dict()
        if os.path.exists(Params.vocab_path): self.load_vocab_dict()
        
        else: logger.warning("NO VOCABULARY DICTIONARY!"); 
        if os.path.exists(Params.char_path): self.load_char_dict()
        else: logger.warning("NO CHARACTERIZER DICTIONARY!"); self.generate_char_dict(); 
        

    # Get A Char's ID
    def getCharID(self, char, ls=False):
        if ls: return [self.char_dict.get(ch, 0) for ch in char]
        return self.char_dict.get(char, 0)
        if isinstance(char, list): return [self.char_dict.get(char, 0) for ch in char]
        return self.char_dict.get(char, 0)

    # Format as same as char dict.
    def load_vocab_dict(self):
        self.vocab_dict = json.load(open(Params.vocab_path))
        for vocab, _id in self.vocab_dict.items():
            self.vocab_id_dict[_id] = vocab
        logger.info("Vocabulary dictionary loaded DONE! SUM %s ." % len(self.vocab_dict))        

    def getVocabID(self, word):
        return self.vocab_dict.get(word, 0)

    def VocabID_to_vocab(self, id):
        self.vocab_id_dict.get(id, "<vocab-unknown>")

    def generate_char_dict(self):
        """
        Read Vocab Data From Vocab files.
        Char Dictionary is generated by vocab dictionary.
        """
        with open(Params.char_path, "w") as c:
            for vocab, _id in self.vocab_dict.items():
                if _id == 0: self.char_dict["<char-unknown>"] = 0
                for ch in vocab:
                    if ch not in self.char_dict: self.char_dict[ch] = self.char_ids; self.char_ids += 1
            c.write(json.dumps(self.char_dict, ensure_ascii=False) + "\n")
        logger.info("Vocabulary dictionary generated DONE! SUM %s ." % len(self.char_dict))                

    def load_char_dict(self):
        self.char_dict = json.load(open(Params.char_path))
        logger.info("Char dictionary loaded DONE! SUM %s ." % len(self.char_dict))

vocabulary = Vocabulary()


class Lookup:

    info = {}
    
    def __init__(self):
        """We should read all passage and questionid,
            according to tags."""
        for mode in ["yes_no", "entity", "description"]:
            with open("{}_rank_test.stat".format(mode)) as f:
                for line in f:
                    data = json.loads(line)
                    ap = {
                        "passage_id": data["passage_id"],
                        "question_type": data["question_type"],
                        "segmented_paragraph": data["segmented_paragraph"]
                    }
                    if data["question_id"] not in self.info:
                        self.info[data["question_id"]] = [ap]
                    else:
                        self.info[data["question_id"]].append(ap)

    def get_all_passageID_by_questionID(self, questionID):
        return self.info[questionID]

    def get_passage_by_passageID(self, questionID, passageID):
        for para in self.info[questionID]:
            if passageID == para["passage_id"]:
                return para
        print("%s not found!!!!" % passageID)

    def get_question_type_by_questionID(self, questionID):
        return self.info[questionID]["question_type"]

    def get_answer_content_by_passageID_spans(self, questionID, passageID, spans):
        return self.get_passage_by_passageID(questionID, passageID)[spans[0]: spans[1]+1]
        
